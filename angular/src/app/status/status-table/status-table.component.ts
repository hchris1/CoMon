import {
  ChangeDetectorRef,
  Component,
  Input,
  OnDestroy,
  OnInit,
} from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';
import {CoMonHubService} from '@app/comon-hub.service';
import {
  StatusServiceProxy,
  StatusPreviewDtoPagedResultDto,
  AssetPreviewDto,
  GroupPreviewDto,
  Criticality,
} from '@shared/service-proxies/service-proxies';
import {PageChangedEvent} from 'ngx-bootstrap/pagination';
import {BehaviorSubject, Subscription} from 'rxjs';

@Component({
  selector: 'app-status-table',
  templateUrl: './status-table.component.html',
})
export class StatusTableComponent implements OnInit, OnDestroy {
  @Input() showAssetGroupFilter = true;
  @Input() showCriticalityFilter = true;
  @Input() showLatestOnlyFilter = true;
  @Input() packageId = undefined;
  @Input() showRefreshBanner = true;
  @Input() triggerReload: BehaviorSubject<boolean>;

  statusPreviews: StatusPreviewDtoPagedResultDto; // Name is terrible but autogenerated

  // Filter options
  options: AssetGroupOption[];
  option: AssetGroupOption;
  latestOnly: boolean = true;
  criticalities: Criticality[] = [
    undefined,
    Criticality._1,
    Criticality._3,
    Criticality._5,
  ];
  criticality: Criticality = undefined;

  // Pagination
  maxResultCount = 10;
  skipCount = 0;
  currentPage = 1;

  // Query params
  assetId: number;
  groupId: number;

  // Status change
  statusChangeSubscription: Subscription;
  connectionEstablishedSubscription: Subscription;
  statusChanged = false;

  constructor(
    private _statusService: StatusServiceProxy,
    private _coMonHubService: CoMonHubService,
    private _changeDetector: ChangeDetectorRef,
    private _route: ActivatedRoute,
    private _router: Router
  ) {}

  ngOnInit(): void {
    this.latestOnly = this.showLatestOnlyFilter;

    this.assetId = parseInt(this._route.snapshot.queryParams['assetId'], 10);
    this.groupId = parseInt(this._route.snapshot.queryParams['groupId'], 10);
    this.loadOptions();

    this.subscribeToStatusChanges();

    this.connectionEstablishedSubscription =
      this._coMonHubService.connectionEstablished.subscribe(established => {
        if (established) this.loadStatuses();
      });

    if (this.triggerReload) {
      this.triggerReload.subscribe(val => {
        if (val) {
          this.loadStatuses();
        }
      });
    }
  }

  ngOnDestroy(): void {
    this.statusChangeSubscription.unsubscribe();
    this.connectionEstablishedSubscription.unsubscribe();
  }

  subscribeToStatusChanges() {
    this.statusChangeSubscription =
      this._coMonHubService.statusUpdate.subscribe(update => {
        this.statusChanged = true;
        this.statusPreviews.items
          .filter(
            statusPreview => statusPreview.package.id === update.packageId
          )
          .forEach(statusPreview => {
            statusPreview.isLatest = false;
          });
        this._changeDetector.detectChanges();
      });
  }

  loadOptions() {
    this._statusService.getStatusTableOptions().subscribe(result => {
      this.options = [
        {
          isGroup: true,
          isRoot: true,
          dto: undefined,
        },
      ];
      this.options = this.options
        .concat(
          result.groups.map(group => {
            return {
              isGroup: true,
              isRoot: false,
              dto: group,
            };
          })
        )
        .concat(
          result.assets.map(asset => {
            return {
              isGroup: false,
              isRoot: false,
              dto: asset,
            };
          })
        );

      if (this.assetId) {
        this.option = this.options
          .filter(o => !o.isGroup && !o.isRoot)
          .find(option => option.dto.id === this.assetId);
      } else if (this.groupId) {
        this.option = this.options
          .filter(o => o.isGroup && !o.isRoot)
          .find(option => option.dto.id === this.groupId);
      } else {
        this.option = this.options[0];
      }

      this._changeDetector.detectChanges();

      this.loadStatuses();
    });
  }

  loadStatuses() {
    const assetId = this.option?.isGroup ? undefined : this.option?.dto?.id;
    const groupId = this.option?.isGroup ? this.option?.dto?.id : undefined;
    this.statusPreviews = undefined;

    this._statusService
      .getStatusTable(
        this.skipCount,
        this.maxResultCount,
        assetId,
        groupId,
        this.packageId,
        this.criticality,
        this.latestOnly
      )
      .subscribe(result => {
        this.statusPreviews = result;
        this.statusChanged = false;
      });
  }

  assetGroupChanged(value: AssetGroupOption) {
    this.option = value;

    if (this.option.isRoot) {
      this.assetId = undefined;
      this.groupId = undefined;
    } else if (this.option.isGroup) {
      this.assetId = undefined;
      this.groupId = this.option.dto.id;
    } else {
      this.assetId = this.option.dto.id;
      this.groupId = undefined;
    }

    this.updateQueryParams();
    this.resetPagination();
    this.loadStatuses();
  }

  updateQueryParams() {
    this._router.navigate([], {
      relativeTo: this._route,
      queryParams: {
        assetId: this.assetId,
        groupId: this.groupId,
      },
      queryParamsHandling: 'merge',
    });
  }

  setLatestOnly(latestOnly: boolean) {
    this.latestOnly = latestOnly;
    this.resetPagination();
    this.loadStatuses();
  }

  setCriticality(criticality: Criticality) {
    this.criticality = criticality;
    this.resetPagination();
    this.loadStatuses();
  }

  changePage(event: PageChangedEvent): void {
    if (event.page === this.currentPage) return;

    this.skipCount = (event.page - 1) * event.itemsPerPage;
    this.maxResultCount = event.itemsPerPage;
    this.loadStatuses();
  }

  resetPagination() {
    this.skipCount = 0;
    this.currentPage = 1;
  }
}

class AssetGroupOption {
  isGroup: boolean;
  isRoot: boolean;
  dto: AssetPreviewDto | GroupPreviewDto;
}
