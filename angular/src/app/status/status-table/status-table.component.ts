import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CoMonHubService } from '@app/comon-hub.service';
import { StatusServiceProxy, StatusPreviewDtoPagedResultDto, AssetPreviewDto, GroupPreviewDto, Criticality } from '@shared/service-proxies/service-proxies';
import { PageChangedEvent } from 'ngx-bootstrap/pagination';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-status-table',
  templateUrl: './status-table.component.html'
})
export class StatusTableComponent implements OnInit, OnDestroy {
  statusPreviews: StatusPreviewDtoPagedResultDto; // Name is terrible but autogenerated

  // Filter options
  options: AssetGroupOption[];
  option: AssetGroupOption;
  latestOnly: boolean = true;
  criticalities: Criticality[] = [undefined, Criticality._1, Criticality._3, Criticality._5];
  criticality: Criticality = undefined;

  // Pagination
  maxResultCount = 10;
  skipCount = 0;

  // Query params
  assetId: number;
  groupId: number;

  // Status change
  statusChangeSubscription: Subscription;
  connectionEstablishedSubscription: Subscription;
  statusChanged = false;

  constructor(
    private _statusService: StatusServiceProxy,
    private _coMonHubService: CoMonHubService,
    private _changeDetector: ChangeDetectorRef,
    private _route: ActivatedRoute,
    private _router: Router,
  ) { }

  ngOnInit(): void {
    this._route.queryParams.subscribe(params => {
      this.assetId = params['assetId'];
      this.groupId = params['groupId'];
      this.loadOptions();
      this.subscribeToStatusChanges();
    });

    this.connectionEstablishedSubscription = this._coMonHubService.connectionEstablished.subscribe((established) => {
      if (established)
        this.loadStatuses();
    });
  }

  ngOnDestroy(): void {
    this.statusChangeSubscription.unsubscribe();
    this.connectionEstablishedSubscription.unsubscribe();
  }

  subscribeToStatusChanges() {
    this.statusChangeSubscription = this._coMonHubService.statusUpdate.subscribe((status) => {
      this.statusChanged = true;
      this.statusPreviews.items
        .filter((statusPreview) => statusPreview.package.id === status.package.id)
        .forEach((statusPreview) => {
          statusPreview.isLatest = false;
        });
      this._changeDetector.detectChanges();
    });
  }

  loadOptions() {
    this._statusService
      .getStatusTableOptions()
      .subscribe((result) => {
        this.options = [{
          isGroup: true,
          isRoot: true,
          dto: undefined
        }];
        this.options = this.options
          .concat(result.groups.map((group) => {
            return {
              isGroup: true,
              isRoot: false,
              dto: group
            };
          }))
          .concat(result.assets.map((asset) => {
            return {
              isGroup: false,
              isRoot: false,
              dto: asset
            };
          }));

        if (this.assetId) {
          this.option = this.options
            .filter(o => !o.isGroup && !o.isRoot)
            .find((option) => option.dto.id == this.assetId);
        }
        else if (this.groupId) {
          this.option = this.options
            .filter(o => o.isGroup && !o.isRoot)
            .find((option) => option.dto.id == this.groupId);
        }
        else {
          this.option = this.options[0];
        }

        this.loadStatuses();
      });
  }

  loadStatuses() {
    const assetId = this.option?.isGroup ? undefined : this.option?.dto?.id;
    const groupId = this.option?.isGroup ? this.option?.dto?.id : undefined;

    this._statusService
      .getStatusTable(this.skipCount, this.maxResultCount, assetId, groupId, this.criticality, this.latestOnly)
      .subscribe((result) => {
        this.statusPreviews = result;
        this.statusChanged = false;
      });
  }

  assetGroupChanged(value: AssetGroupOption) {
    this.option = value;

    if (this.option.isRoot) {
      this.assetId = undefined;
      this.groupId = undefined;
    } else if (this.option.isGroup) {
      this.assetId = undefined;
      this.groupId = this.option.dto.id;
    } else {
      this.assetId = this.option.dto.id;
      this.groupId = undefined;
    }

    this.updateQueryParams();

    this.loadStatuses();
  }

  updateQueryParams() {
    this._router.navigate([], {
      relativeTo: this._route,
      queryParams: {
        assetId: this.assetId,
        groupId: this.groupId
      },
      queryParamsHandling: 'merge'
    });
  }

  setLatestOnly(latestOnly: boolean) {
    this.latestOnly = latestOnly;
    this.loadStatuses();
  }

  setCriticality(criticality: Criticality) {
    this.criticality = criticality;
    this.loadStatuses();
  }

  changePage(event: PageChangedEvent): void {
    this.skipCount = (event.page - 1) * event.itemsPerPage;
    this.maxResultCount = event.itemsPerPage;
    this.loadStatuses();
  }
}

class AssetGroupOption {
  isGroup: boolean;
  isRoot: boolean;
  dto: AssetPreviewDto | GroupPreviewDto;
}
